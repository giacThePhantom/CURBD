{"cmd": "\ndef plot_train_evolution(figure, subplots, chi2s, pvars, neuron_index, state, experimental_data, plots, sim_param):\n    if not figure:\n        plt.ion()\n        figure, subplots = plt.subplots(2, 3, layout = 'tight')\n        plots['exp_neuron'], = subplots[0, 2].plot(\n                np.arange(0, sim_param['sim_time'], sim_param['data_dt']),\n                experimental_data[neuron_index, :],\n                label = 'experimental'\n                )\n        plots['sim_neuron'], = subplots[0, 2].plot(\n                np.arange(0, sim_param['sim_time'], sim_param['dt']),\n                state[neuron_index, :],\n                label = 'simulated',\n                )\n        subplots[0,2].legend()\n        subplots[0,2].set_ylim(-1,1)\n        plots['state'] = subplots[0, 0].imshow(\n                state,\n                extent = [\n                    0,\n                    sim_param['sim_time'],\n                    0,\n                    sim_param['n_neurons']\n                    ],\n                aspect = 'auto'\n                )\n        subplots[0, 1].imshow(\n                experimental_data,\n                extent = [\n                    0,\n                    sim_param['sim_time'],\n                    0,\n                    sim_param['n_neurons']\n                    ],\n                aspect = 'auto'\n                )\n        plots['chi2'], = subplots[1, 0].plot(chi2s)\n        plots['pvars'], = subplots[1, 1].plot(pvars)\n        subplots[1, 2].set_visible(False)\n\n        subplots[0, 0].set_title(\"Simulated neurons\")\n        subplots[0, 0].set_xlabel(\"Time (s)\")\n        subplots[0, 0].set_ylabel(\"Neuron\")\n        subplots[0, 1].set_title(\"Experimental neurons\")\n        subplots[0, 1].set_xlabel(\"Time (s)\")\n        subplots[0, 1].set_ylabel(\"Neuron\")\n        subplots[0, 2].set_title(\"Neuron {}\".format(neuron_index))\n        subplots[0, 2].set_xlabel(\"Time (s)\")\n        subplots[0, 2].set_ylabel(\"Activity\")\n        subplots[1, 0].set_title(r\"$chi^2$\")\n        subplots[1, 0].set_xlabel(\"Iteration\")\n        subplots[1, 0].set_ylabel(r\"$chi^2$\")\n        subplots[1, 1].set_title(\"pvar\")\n        subplots[1, 1].set_xlabel(\"Iteration\")\n        subplots[1, 1].set_ylabel(\"pvar\")\n\n    plots['sim_neuron'].set_ydata(state[neuron_index, :])\n    plots['exp_neuron'].set_ydata(experimental_data[neuron_index, :])\n    plots['state'].set_data(state)\n    subplots[1, 0].plot(chi2s, c = 'g')\n    subplots[1, 1].plot(pvars, c = 'g')\n\n    figure.canvas.draw()\n    figure.canvas.flush_events()\n\n    return figure, subplots, plots\n\n\ndef met_stopping_condition(stopping_condition, epoch, chi2, pvar):\n    stop = False\n    for name in stopping_condition:\n        if name == 'chi2':\n            stop = stop or chi2 < stopping_condition[name]\n        elif name == 'pvar':\n            stop = stop or pvar > stopping_condition[name]\n        elif name == 'epochs':\n            stop = stop or epoch > stopping_condition[name]\n        elif name == 'custom':\n            stop = stop or stopping_condition[name]\n    return stop\n\n\ndef network_train(neurons, J_in, H_in, P_in, experimental_data, sim_param, stopping_condition, plot = False):\n    J = J_in.copy()\n    H = H_in.copy()\n    P = P_in.copy()\n    state = None\n    chi2s = []\n    pvars = []\n    epoch = 0\n    figure, subplots, plots = None, None, {}\n    random_neuron_index = npr.choice(target_neurons)\n    stop = False\n    while not stop:\n        state, J, P, chi2 = run(neurons, J, H, P, experimental_data, sim_param)\n        distance = np.linalg.norm(\n                experimental_data - state[:, [int(i * sim_param['data_dt'] / sim_param['dt']) for i in range(experimental_data.shape[1])]])\n        pvar = 1 - (distance / (math.sqrt(300 * 1200)) * np.std(experimental_data)) ** 2\n        chi2s.append(chi2)\n        pvars.append(pvar)\n\n        if plot:\n            figure, subplots, plots = plot_train_evolution(\n                    figure,\n                    subplots,\n                    chi2s,\n                    pvars,\n                    random_neuron_index,\n                    state,\n                    experimental_data,\n                    plots,\n                    sim_param\n                    )\n\n        epoch += 1\n        stop = met_stopping_condition(stopping_condition, epoch, chi2, pvar)\n\n    return state, J, P, chi2s, pvars\n", "cmd_opts": " --cell_id=54L3Vlhdwl -s", "import_complete": 1, "terminal": "nvimterm"}